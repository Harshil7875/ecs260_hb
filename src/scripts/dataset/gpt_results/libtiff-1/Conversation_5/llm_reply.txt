```
static int readSeparateTilesIntoBuffer(TIFF* in, uint8* obuf,
                                       uint32 imagelength, uint32 imagewidth,
                                       uint32 tw, uint32 tl,
                                       uint16 spp, uint16 bps)
{
    int i, status = 1, sample;
    uint16 bytes_per_sample = (bps + 7) / 8;
    uint32 row, col, nrow, ncol, row_offset, col_offset;
    tsize_t tbytes = 0, tilesize = TIFFTileSize(in);
    tsample_t s;
    uint8* bufp = (uint8*)obuf;
    unsigned char* srcbuffs[MAX_SAMPLES];
    unsigned char* tbuff = NULL;

    for (sample = 0; (sample < spp) && (sample < MAX_SAMPLES); sample++)
    {
        srcbuffs[sample] = NULL;
        tbuff = (unsigned char*)_TIFFmalloc(tilesize + 8);
        if (!tbuff)
        {
            TIFFError("readSeparateTilesIntoBuffer",
                      "Unable to allocate tile read buffer for sample %d", sample);
            for (i = 0; i < sample; i++)
                _TIFFfree(srcbuffs[i]);
            return 0;
        }
        srcbuffs[sample] = tbuff;
    }

    for (row = 0; row < imagelength; row += tl)
    {
        nrow = (row + tl > imagelength) ? imagelength - row : tl;
        for (col = 0; col < imagewidth; col += tw)
        {
            for (s = 0; s < spp; s++)
            {
                tbytes = TIFFReadTile(in, srcbuffs[s], col, row, 0, s);
                if (tbytes < 0)
                {
                    TIFFError(TIFFFileName(in),
                              "Error, can't read tile for row %lu col %lu, sample %lu",
                              (unsigned long)col, (unsigned long)row, (unsigned long)s);
                    status = 0;
                    for (sample = 0; (sample < spp) && (sample < MAX_SAMPLES); sample++)
                    {
                        tbuff = srcbuffs[sample];
                        if (tbuff != NULL)
                            _TIFFfree(tbuff);
                    }
                    return status;
                }
            }

            if (col + tw > imagewidth)
                ncol = imagewidth - col;
            else
                ncol = tw;

            row_offset = row * (((imagewidth * spp * bps) + 7) / 8);
            col_offset = ((col * spp * bps) + 7) / 8;

            bufp = obuf + row_offset + col_offset;

            // Process the tile data here

        }
    }

    for (sample = 0; (sample < spp) && (sample < MAX_SAMPLES); sample++)
    {
        tbuff = srcbuffs[sample];
        if (tbuff != NULL)
            _TIFFfree(tbuff);
    }

    return status;
}
```